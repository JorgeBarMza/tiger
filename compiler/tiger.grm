%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | ELSEPRE

%nonterm  exp | program | decs | dec | tydec | vardec | fundec | ty | tyfields | tyfieldsP | lvalue | unit | negation
  | comparison | arithmetic | boolcomp | expP | record | recP | array | assignment | ifThenElse
  | ifThen | let | expseq | args | while | forloop | lval | sequence | funCall

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

(* Precedences *)
%nonassoc ELSEPRE
%nonassoc ELSE
%nonassoc ASSIGN
%left OF DO
%left AND OR
%nonassoc EQ NEQ GT LT LE GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* Grammar definition *)

program	: exp ()

exp: NIL () 
  | sequence ()
  | lvalue ()
  | INT ()
  | STRING ()
  | negation ()
  | arithmetic ()
  | comparison ()
  | boolcomp ()
  | record ()
  | array ()
  | assignment ()
  | ifThenElse ()
  | ifThen ()
  | while ()
  | forloop ()
  | BREAK ()
  | unit ()
  | funCall ()
  | let ()

expP: exp SEMICOLON expP ()
  | exp ()

expseq: expP () 
  | ()

sequence: LPAREN expP RPAREN ()

args: exp COMMA args ()
  | exp ()
  | ()

arithmetic: exp PLUS exp ()
  | exp MINUS exp ()
  | exp TIMES exp ()
  | exp DIVIDE exp ()

comparison: exp EQ exp ()
  | exp NEQ exp ()
  | exp LT exp ()
  | exp LE exp ()
  | exp GT exp ()
  | exp GE exp ()

boolcomp: exp AND exp ()
  | exp OR exp ()

negation: MINUS exp ()

unit: LPAREN RPAREN ()

record: ID LBRACE ID EQ exp recP RBRACE ()

recP: COMMA ID EQ exp recP () 
  | ()

array: ID LBRACK exp RBRACK OF exp ()

decs: dec decs ()
  | dec ()

dec: tydec ()
  | vardec ()
  | fundec ()

tydec: TYPE ID EQ ty ()

ty: ID ()
  | LBRACE tyfields RBRACE ()
  | ARRAY OF ID ()

tyfields: ()
  | ID COLON ID tyfieldsP ()

tyfieldsP: () 
  | COMMA ID  COLON ID tyfieldsP ()

vardec: VAR ID ASSIGN exp ()
  | VAR ID COLON ID ASSIGN exp ()

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()

lvalue: ID () 
  | lval ()

lval: ID DOT ID ()
  | lval DOT ID ()
  | ID LBRACK exp RBRACK ()
  | lval LBRACK exp RBRACK ()

funCall: ID LPAREN args RPAREN ()

assignment: lvalue ASSIGN exp ()

ifThenElse: IF exp THEN exp ELSE exp ()

ifThen: IF exp THEN exp %prec ELSEPRE ()

while: WHILE exp DO exp ()

forloop: FOR ID ASSIGN exp TO exp DO exp ()

let: LET decs IN expseq END ()