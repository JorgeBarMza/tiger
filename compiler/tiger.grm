structure A =  Absyn

fun foo() = (); (* Enforces syntax highlighting in VS Code editor, reason unknown *)

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | ELSEPRE | NONMUTREC

%nonterm  exp of A.exp
  | program of A.exp 
  | decs of A.dec list
  | dec of A.dec
  | tydec of {name: A.symbol, ty: A.ty, pos: A.pos}
  | tydecs of {name: A.symbol, ty: A.ty, pos: A.pos} list
  | vardec of A.dec
  | fundec of A.fundec
  | fundecs of A.fundec list 
  | ty of A.ty
  | tyfields of A.field list 
  | tyfieldsP of A.field list
  | lvalue of A.var
  | lvalueExp of A.exp
  | unit of A.exp
  | negation of A.exp
  | comparison of A.exp
  | arithmetic of A.exp
  | boolcomp of A.exp
  | expP of (A.exp * A.pos) list
  | record of A.exp
  | recP of (A.symbol * A.exp * A.pos) list
  | array of A.exp
  | assignment of A.exp
  | ifThenElse of A.exp
  | ifThen of A.exp
  | letdecl of A.exp
  | expseq of A.exp
  | args of A.exp list
  | whileloop of A.exp
  | forloop of A.exp
  | lval of A.var
  | sequence of A.exp
  | funCall of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

(* Precedences *)
%left NONMUTREC
%left FUNCTION TYPE
%nonassoc ELSEPRE
%nonassoc ELSE
%nonassoc ASSIGN
%left OF DO
%left AND OR
%nonassoc EQ NEQ GT LT LE GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* Grammar definition *)

program	: exp (exp)

exp: NIL (A.NilExp) 
  | sequence (sequence)
  | lvalueExp (lvalueExp)
  | INT (A.IntExp(INT))
  | STRING (A.StringExp(STRING,STRINGleft))
  | negation (negation)
  | arithmetic (arithmetic)
  | comparison (comparison)
  | boolcomp (boolcomp)
  | record (record)
  | array (array)
  | assignment (assignment)
  | ifThenElse (ifThenElse)
  | ifThen (ifThen)
  | whileloop (whileloop)
  | forloop (forloop)
  | BREAK (A.BreakExp(BREAKleft))
  | unit (unit)
  | funCall (funCall)
  | letdecl (letdecl)

expP: exp SEMICOLON expP ((exp, expleft)::expP)
  | exp ([(exp, expleft)])

expseq: expP (A.SeqExp(expP))
  | (A.NilExp)

sequence: LPAREN expP RPAREN (A.SeqExp(expP))

args: exp COMMA args (exp::args)  
  | exp ([exp])
  | ([])

arithmetic: exp PLUS exp (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
  | exp MINUS exp (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})
  | exp TIMES exp (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
  | exp DIVIDE exp (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})

comparison: exp EQ exp (A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
  | exp NEQ exp (A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
  | exp LT exp (A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
  | exp LE exp (A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})
  | exp GT exp (A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
  | exp GE exp (A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})

boolcomp: exp AND exp (A.IfExp{test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=ANDleft})
  | exp OR exp (A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=ORleft})

negation: MINUS exp (A.OpExp{left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=MINUSleft})

unit: LPAREN RPAREN (A.NilExp)

record: ID LBRACE ID EQ exp recP RBRACE (A.RecordExp{fields=(Symbol.symbol(ID2), exp, ID2left)::recP, typ=Symbol.symbol(ID1), pos=ID1left})

recP: COMMA ID EQ exp recP ((Symbol.symbol(ID), exp, IDleft)::recP) 
  | ([]) (*TODO: FIx possible bug*)

array: ID LBRACK exp RBRACK OF exp (A.ArrayExp{typ=Symbol.symbol(ID), size=exp1, init=exp2, pos=IDleft})

decs: dec decs (dec::decs)
  | dec ([dec])

dec: tydecs (A.TypeDec(tydecs))
  | vardec (vardec)
  | fundecs (A.FunctionDec(fundecs))

tydecs: tydec tydecs (tydec::tydecs)
  | tydec %prec NONMUTREC ([tydec])

fundecs: fundec fundecs (fundec::fundecs)
  | fundec %prec NONMUTREC ([fundec])

tydec: TYPE ID EQ ty ({name=Symbol.symbol(ID), ty=ty, pos=TYPEleft})

ty: ID (A.NameTy(Symbol.symbol(ID), IDleft))
  | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
  | ARRAY OF ID (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

tyfields: ([])
  | ID COLON ID tyfieldsP ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=COLONleft}::tyfieldsP)

tyfieldsP: ([]) 
  | COMMA ID  COLON ID tyfieldsP ({name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=COMMAleft}::tyfieldsP)

vardec: VAR ID ASSIGN exp (A.VarDec{name=Symbol.symbol(ID), escape=ref true, typ=NONE, init=exp, pos=VARleft})
  | VAR ID COLON ID ASSIGN exp (A.VarDec{name=Symbol.symbol(ID1), escape=ref true, typ=SOME(Symbol.symbol(ID2), ID2left), init=exp, pos=VARleft})

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp ({name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
  | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=Symbol.symbol(ID1), params=tyfields, result=SOME(Symbol.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft})

lvalue: ID (A.SimpleVar(Symbol.symbol(ID), IDleft)) 
  | lval (lval)

lvalueExp: lvalue (A.VarExp(lvalue))

lval: ID DOT ID (A.FieldVar(A.SimpleVar(Symbol.symbol(ID1), ID1left), Symbol.symbol(ID2), ID1left))
  | lval DOT ID (A.FieldVar(lval, Symbol.symbol(ID), DOTleft))
  | ID LBRACK exp RBRACK (A.SubscriptVar(A.SimpleVar(Symbol.symbol(ID), IDleft), exp, IDleft))
  | lval LBRACK exp RBRACK (A.SubscriptVar(lval, exp, LBRACKleft))

funCall: ID LPAREN args RPAREN (A.CallExp{func=Symbol.symbol(ID), args=args, pos=IDleft})

assignment: lvalue ASSIGN exp (A.AssignExp{var=lvalue, exp=exp, pos=ASSIGNleft})

ifThenElse: IF exp THEN exp ELSE exp (A.IfExp{test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft})

ifThen: IF exp THEN exp %prec ELSEPRE (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})

whileloop: WHILE exp DO exp (A.WhileExp{test=exp1, body=exp2, pos=WHILEleft})

forloop: FOR ID ASSIGN exp TO exp DO exp (A.ForExp{var=Symbol.symbol(ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})

letdecl: LET decs IN expseq END (A.LetExp{decs=decs, body=expseq, pos=LETleft})