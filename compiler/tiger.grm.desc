
state 0:

	program : . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 19
	program	goto 161
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 1:

	exp : funCall .  (reduce by rule 19)



	.	reduce by rule 19


state 2:

	exp : sequence .  (reduce by rule 2)



	.	reduce by rule 2


state 3:

	lvalue : lval .  (reduce by rule 69)
	lval : lval . DOT ID 
	lval : lval . LBRACK exp RBRACK 

	LBRACK	shift 32
	DOT	shift 31


	.	reduce by rule 69


state 4:

	exp : forloop .  (reduce by rule 16)



	.	reduce by rule 16


state 5:

	exp : whileloop .  (reduce by rule 15)



	.	reduce by rule 15


state 6:

	exp : letdecl .  (reduce by rule 20)



	.	reduce by rule 20


state 7:

	exp : ifThen .  (reduce by rule 14)



	.	reduce by rule 14


state 8:

	exp : ifThenElse .  (reduce by rule 13)



	.	reduce by rule 13


state 9:

	exp : assignment .  (reduce by rule 12)



	.	reduce by rule 12


state 10:

	exp : array .  (reduce by rule 11)



	.	reduce by rule 11


state 11:

	exp : record .  (reduce by rule 10)



	.	reduce by rule 10


state 12:

	exp : boolcomp .  (reduce by rule 9)



	.	reduce by rule 9


state 13:

	exp : arithmetic .  (reduce by rule 7)



	.	reduce by rule 7


state 14:

	exp : comparison .  (reduce by rule 8)



	.	reduce by rule 8


state 15:

	exp : negation .  (reduce by rule 6)



	.	reduce by rule 6


state 16:

	exp : unit .  (reduce by rule 18)



	.	reduce by rule 18


state 17:

	exp : lvalueExp .  (reduce by rule 3)



	.	reduce by rule 3


state 18:

	lvalueExp : lvalue .  (reduce by rule 70)
	assignment : lvalue . ASSIGN exp 

	ASSIGN	shift 33


	.	reduce by rule 70


state 19:

	program : exp .  (reduce by rule 0)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 0


state 20:

	exp : NIL .  (reduce by rule 1)



	.	reduce by rule 1


state 21:

	exp : BREAK .  (reduce by rule 17)



	.	reduce by rule 17


state 22:

	letdecl : LET . decs IN expseq END 

	FUNCTION	shift 55
	VAR	shift 54
	TYPE	shift 53

	decs	goto 52
	dec	goto 51
	tydec	goto 50
	tydecs	goto 49
	vardec	goto 48
	fundec	goto 47
	fundecs	goto 46

	.	error


state 23:

	forloop : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 56


	.	error


state 24:

	whileloop : WHILE . exp DO exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 57
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 25:

	ifThenElse : IF . exp THEN exp ELSE exp 
	ifThen : IF . exp THEN exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 58
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 26:

	negation : MINUS . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 59
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 27:

	unit : LPAREN . RPAREN 
	sequence : LPAREN . expP RPAREN 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	RPAREN	shift 62
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 61
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	expP	goto 60
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 28:

	exp : STRING .  (reduce by rule 5)



	.	reduce by rule 5


state 29:

	exp : INT .  (reduce by rule 4)



	.	reduce by rule 4


state 30:

	lvalue : ID .  (reduce by rule 68)
	record : ID . LBRACE ID EQ exp recP RBRACE 
	array : ID . LBRACK exp RBRACK OF exp 
	lval : ID . DOT ID 
	lval : ID . LBRACK exp RBRACK 
	funCall : ID . LPAREN args RPAREN 

	LPAREN	shift 66
	LBRACK	shift 65
	LBRACE	shift 64
	DOT	shift 63


	.	reduce by rule 68


state 31:

	lval : lval DOT . ID 

	ID	shift 67


	.	error


state 32:

	lval : lval LBRACK . exp RBRACK 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 68
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 33:

	assignment : lvalue ASSIGN . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 69
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 34:

	boolcomp : exp OR . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 70
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 35:

	boolcomp : exp AND . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 71
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 36:

	comparison : exp GE . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 72
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 37:

	comparison : exp GT . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 73
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 38:

	comparison : exp LE . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 74
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 39:

	comparison : exp LT . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 75
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 40:

	comparison : exp NEQ . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 76
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 41:

	comparison : exp EQ . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 77
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 42:

	arithmetic : exp DIVIDE . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 78
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 43:

	arithmetic : exp TIMES . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 79
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 44:

	arithmetic : exp MINUS . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 80
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 45:

	arithmetic : exp PLUS . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 81
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 46:

	dec : fundecs .  (reduce by rule 51)



	.	reduce by rule 51


state 47:

	fundecs : fundec . fundecs 
	fundecs : fundec .  (reduce by rule 55)

	FUNCTION	shift 55

	fundec	goto 47
	fundecs	goto 82

	.	reduce by rule 55


state 48:

	dec : vardec .  (reduce by rule 50)



	.	reduce by rule 50


state 49:

	dec : tydecs .  (reduce by rule 49)



	.	reduce by rule 49


state 50:

	tydecs : tydec . tydecs 
	tydecs : tydec .  (reduce by rule 53)

	TYPE	shift 53

	tydec	goto 50
	tydecs	goto 83

	.	reduce by rule 53


state 51:

	decs : dec . decs 
	decs : dec .  (reduce by rule 48)

	FUNCTION	shift 55
	VAR	shift 54
	TYPE	shift 53

	decs	goto 84
	dec	goto 51
	tydec	goto 50
	tydecs	goto 49
	vardec	goto 48
	fundec	goto 47
	fundecs	goto 46

	.	reduce by rule 48


state 52:

	letdecl : LET decs . IN expseq END 

	IN	shift 85


	.	error


state 53:

	tydec : TYPE . ID EQ ty 

	ID	shift 86


	.	error


state 54:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 87


	.	error


state 55:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 88


	.	error


state 56:

	forloop : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 89


	.	error


state 57:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	whileloop : WHILE exp . DO exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34
	DO	shift 90


	.	error


state 58:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	ifThenElse : IF exp . THEN exp ELSE exp 
	ifThen : IF exp . THEN exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34
	THEN	shift 91


	.	error


state 59:

	negation : MINUS exp .  (reduce by rule 41)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	TIMES	shift 43
	DIVIDE	shift 42


	.	reduce by rule 41


state 60:

	sequence : LPAREN expP . RPAREN 

	RPAREN	shift 92


	.	error


state 61:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	expP : exp . SEMICOLON expP 
	expP : exp .  (reduce by rule 22)

	SEMICOLON	shift 93
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 22


state 62:

	unit : LPAREN RPAREN .  (reduce by rule 42)



	.	reduce by rule 42


state 63:

	lval : ID DOT . ID 

	ID	shift 94


	.	error


state 64:

	record : ID LBRACE . ID EQ exp recP RBRACE 

	ID	shift 95


	.	error


state 65:

	array : ID LBRACK . exp RBRACK OF exp 
	lval : ID LBRACK . exp RBRACK 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 96
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 66:

	funCall : ID LPAREN . args RPAREN 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 98
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	args	goto 97
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	reduce by rule 28


state 67:

	lval : lval DOT ID .  (reduce by rule 72)



	.	reduce by rule 72


state 68:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	lval : lval LBRACK exp . RBRACK 

	RBRACK	shift 99
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	error


state 69:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	assignment : lvalue ASSIGN exp .  (reduce by rule 76)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 76


state 70:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	boolcomp : exp OR exp .  (reduce by rule 40)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36


	.	reduce by rule 40


state 71:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp AND exp .  (reduce by rule 39)
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36


	.	reduce by rule 39


state 72:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	comparison : exp GE exp .  (reduce by rule 38)
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 38
	COMMA	reduce by rule 38
	SEMICOLON	reduce by rule 38
	RPAREN	reduce by rule 38
	RBRACK	reduce by rule 38
	RBRACE	reduce by rule 38
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 38
	OR	reduce by rule 38
	THEN	reduce by rule 38
	ELSE	reduce by rule 38
	TO	reduce by rule 38
	DO	reduce by rule 38
	IN	reduce by rule 38
	END	reduce by rule 38
	FUNCTION	reduce by rule 38
	VAR	reduce by rule 38
	TYPE	reduce by rule 38


	.	error


state 73:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp GT exp .  (reduce by rule 37)
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 37
	COMMA	reduce by rule 37
	SEMICOLON	reduce by rule 37
	RPAREN	reduce by rule 37
	RBRACK	reduce by rule 37
	RBRACE	reduce by rule 37
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 37
	OR	reduce by rule 37
	THEN	reduce by rule 37
	ELSE	reduce by rule 37
	TO	reduce by rule 37
	DO	reduce by rule 37
	IN	reduce by rule 37
	END	reduce by rule 37
	FUNCTION	reduce by rule 37
	VAR	reduce by rule 37
	TYPE	reduce by rule 37


	.	error


state 74:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp LE exp .  (reduce by rule 36)
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 36
	COMMA	reduce by rule 36
	SEMICOLON	reduce by rule 36
	RPAREN	reduce by rule 36
	RBRACK	reduce by rule 36
	RBRACE	reduce by rule 36
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 36
	OR	reduce by rule 36
	THEN	reduce by rule 36
	ELSE	reduce by rule 36
	TO	reduce by rule 36
	DO	reduce by rule 36
	IN	reduce by rule 36
	END	reduce by rule 36
	FUNCTION	reduce by rule 36
	VAR	reduce by rule 36
	TYPE	reduce by rule 36


	.	error


state 75:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp LT exp .  (reduce by rule 35)
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 35
	COMMA	reduce by rule 35
	SEMICOLON	reduce by rule 35
	RPAREN	reduce by rule 35
	RBRACK	reduce by rule 35
	RBRACE	reduce by rule 35
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 35
	OR	reduce by rule 35
	THEN	reduce by rule 35
	ELSE	reduce by rule 35
	TO	reduce by rule 35
	DO	reduce by rule 35
	IN	reduce by rule 35
	END	reduce by rule 35
	FUNCTION	reduce by rule 35
	VAR	reduce by rule 35
	TYPE	reduce by rule 35


	.	error


state 76:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp NEQ exp .  (reduce by rule 34)
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 34
	COMMA	reduce by rule 34
	SEMICOLON	reduce by rule 34
	RPAREN	reduce by rule 34
	RBRACK	reduce by rule 34
	RBRACE	reduce by rule 34
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 34
	OR	reduce by rule 34
	THEN	reduce by rule 34
	ELSE	reduce by rule 34
	TO	reduce by rule 34
	DO	reduce by rule 34
	IN	reduce by rule 34
	END	reduce by rule 34
	FUNCTION	reduce by rule 34
	VAR	reduce by rule 34
	TYPE	reduce by rule 34


	.	error


state 77:

	comparison : exp . EQ exp 
	comparison : exp EQ exp .  (reduce by rule 33)
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	EOF	reduce by rule 33
	COMMA	reduce by rule 33
	SEMICOLON	reduce by rule 33
	RPAREN	reduce by rule 33
	RBRACK	reduce by rule 33
	RBRACE	reduce by rule 33
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	AND	reduce by rule 33
	OR	reduce by rule 33
	THEN	reduce by rule 33
	ELSE	reduce by rule 33
	TO	reduce by rule 33
	DO	reduce by rule 33
	IN	reduce by rule 33
	END	reduce by rule 33
	FUNCTION	reduce by rule 33
	VAR	reduce by rule 33
	TYPE	reduce by rule 33


	.	error


state 78:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	arithmetic : exp DIVIDE exp .  (reduce by rule 32)
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 



	.	reduce by rule 32


state 79:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp TIMES exp .  (reduce by rule 31)
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 



	.	reduce by rule 31


state 80:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp MINUS exp .  (reduce by rule 30)
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	TIMES	shift 43
	DIVIDE	shift 42


	.	reduce by rule 30


state 81:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp PLUS exp .  (reduce by rule 29)
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	TIMES	shift 43
	DIVIDE	shift 42


	.	reduce by rule 29


state 82:

	fundecs : fundec fundecs .  (reduce by rule 54)



	.	reduce by rule 54


state 83:

	tydecs : tydec tydecs .  (reduce by rule 52)



	.	reduce by rule 52


state 84:

	decs : dec decs .  (reduce by rule 47)



	.	reduce by rule 47


state 85:

	letdecl : LET decs IN . expseq END 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 61
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	expP	goto 101
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	expseq	goto 100
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	reduce by rule 24


state 86:

	tydec : TYPE ID . EQ ty 

	EQ	shift 102


	.	error


state 87:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 104
	ASSIGN	shift 103


	.	error


state 88:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 105


	.	error


state 89:

	forloop : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 106
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 90:

	whileloop : WHILE exp DO . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 107
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 91:

	ifThenElse : IF exp THEN . exp ELSE exp 
	ifThen : IF exp THEN . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 108
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 92:

	sequence : LPAREN expP RPAREN .  (reduce by rule 25)



	.	reduce by rule 25


state 93:

	expP : exp SEMICOLON . expP 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 61
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	expP	goto 109
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 94:

	lval : ID DOT ID .  (reduce by rule 71)



	.	reduce by rule 71


state 95:

	record : ID LBRACE ID . EQ exp recP RBRACE 

	EQ	shift 110


	.	error


state 96:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	array : ID LBRACK exp . RBRACK OF exp 
	lval : ID LBRACK exp . RBRACK 

	RBRACK	shift 111
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	error


state 97:

	funCall : ID LPAREN args . RPAREN 

	RPAREN	shift 112


	.	error


state 98:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	args : exp . COMMA args 
	args : exp .  (reduce by rule 27)

	COMMA	shift 113
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 27


state 99:

	lval : lval LBRACK exp RBRACK .  (reduce by rule 74)



	.	reduce by rule 74


state 100:

	letdecl : LET decs IN expseq . END 

	END	shift 114


	.	error


state 101:

	expseq : expP .  (reduce by rule 23)



	.	reduce by rule 23


state 102:

	tydec : TYPE ID EQ . ty 

	ID	shift 118
	LBRACE	shift 117
	ARRAY	shift 116

	ty	goto 115

	.	error


state 103:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 119
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 104:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 120


	.	error


state 105:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 122

	tyfields	goto 121

	.	reduce by rule 60


state 106:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	forloop : FOR ID ASSIGN exp . TO exp DO exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34
	TO	shift 123


	.	error


state 107:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	whileloop : WHILE exp DO exp .  (reduce by rule 79)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 79


state 108:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	ifThenElse : IF exp THEN exp . ELSE exp 
	ifThen : IF exp THEN exp .  (reduce by rule 78)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34
	ELSE	shift 124


	.	reduce by rule 78


state 109:

	expP : exp SEMICOLON expP .  (reduce by rule 21)



	.	reduce by rule 21


state 110:

	record : ID LBRACE ID EQ . exp recP RBRACE 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 125
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 111:

	array : ID LBRACK exp RBRACK . OF exp 
	lval : ID LBRACK exp RBRACK .  (reduce by rule 73)

	OF	shift 126


	.	reduce by rule 73


state 112:

	funCall : ID LPAREN args RPAREN .  (reduce by rule 75)



	.	reduce by rule 75


state 113:

	args : exp COMMA . args 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 98
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	args	goto 127
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	reduce by rule 28


state 114:

	letdecl : LET decs IN expseq END .  (reduce by rule 81)



	.	reduce by rule 81


state 115:

	tydec : TYPE ID EQ ty .  (reduce by rule 56)



	.	reduce by rule 56


state 116:

	ty : ARRAY . OF ID 

	OF	shift 128


	.	error


state 117:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 122

	tyfields	goto 129

	.	reduce by rule 60


state 118:

	ty : ID .  (reduce by rule 57)



	.	reduce by rule 57


state 119:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 64)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 64


state 120:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 130


	.	error


state 121:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 

	RPAREN	shift 131


	.	error


state 122:

	tyfields : ID . COLON ID tyfieldsP 

	COLON	shift 132


	.	error


state 123:

	forloop : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 133
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 124:

	ifThenElse : IF exp THEN exp ELSE . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 134
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 125:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	record : ID LBRACE ID EQ exp . recP RBRACE 

	COMMA	shift 136
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34

	recP	goto 135

	.	reduce by rule 45


state 126:

	array : ID LBRACK exp RBRACK OF . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 137
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 127:

	args : exp COMMA args .  (reduce by rule 26)



	.	reduce by rule 26


state 128:

	ty : ARRAY OF . ID 

	ID	shift 138


	.	error


state 129:

	ty : LBRACE tyfields . RBRACE 

	RBRACE	shift 139


	.	error


state 130:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 140
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 131:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 142
	EQ	shift 141


	.	error


state 132:

	tyfields : ID COLON . ID tyfieldsP 

	ID	shift 143


	.	error


state 133:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	forloop : FOR ID ASSIGN exp TO exp . DO exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34
	DO	shift 144


	.	error


state 134:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	ifThenElse : IF exp THEN exp ELSE exp .  (reduce by rule 77)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 77


state 135:

	record : ID LBRACE ID EQ exp recP . RBRACE 

	RBRACE	shift 145


	.	error


state 136:

	recP : COMMA . ID EQ exp recP 

	ID	shift 146


	.	error


state 137:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	array : ID LBRACK exp RBRACK OF exp .  (reduce by rule 46)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 46


state 138:

	ty : ARRAY OF ID .  (reduce by rule 59)



	.	reduce by rule 59


state 139:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 58)



	.	reduce by rule 58


state 140:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 65)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 65


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 147
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 142:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 148


	.	error


state 143:

	tyfields : ID COLON ID . tyfieldsP 

	COMMA	shift 150

	tyfieldsP	goto 149

	.	reduce by rule 62


state 144:

	forloop : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 151
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 145:

	record : ID LBRACE ID EQ exp recP RBRACE .  (reduce by rule 43)



	.	reduce by rule 43


state 146:

	recP : COMMA ID . EQ exp recP 

	EQ	shift 152


	.	error


state 147:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 66)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 66


state 148:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 153


	.	error


state 149:

	tyfields : ID COLON ID tyfieldsP .  (reduce by rule 61)



	.	reduce by rule 61


state 150:

	tyfieldsP : COMMA . ID COLON ID tyfieldsP 

	ID	shift 154


	.	error


state 151:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	forloop : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 80)

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 80


state 152:

	recP : COMMA ID EQ . exp recP 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 155
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 153:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 30
	INT	shift 29
	STRING	shift 28
	LPAREN	shift 27
	MINUS	shift 26
	IF	shift 25
	WHILE	shift 24
	FOR	shift 23
	LET	shift 22
	BREAK	shift 21
	NIL	shift 20

	exp	goto 156
	lvalue	goto 18
	lvalueExp	goto 17
	unit	goto 16
	negation	goto 15
	comparison	goto 14
	arithmetic	goto 13
	boolcomp	goto 12
	record	goto 11
	array	goto 10
	assignment	goto 9
	ifThenElse	goto 8
	ifThen	goto 7
	letdecl	goto 6
	whileloop	goto 5
	forloop	goto 4
	lval	goto 3
	sequence	goto 2
	funCall	goto 1

	.	error


state 154:

	tyfieldsP : COMMA ID . COLON ID tyfieldsP 

	COLON	shift 157


	.	error


state 155:

	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 
	recP : COMMA ID EQ exp . recP 

	COMMA	shift 136
	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34

	recP	goto 158

	.	reduce by rule 45


state 156:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 67)
	comparison : exp . EQ exp 
	comparison : exp . NEQ exp 
	comparison : exp . LT exp 
	comparison : exp . LE exp 
	comparison : exp . GT exp 
	comparison : exp . GE exp 
	arithmetic : exp . PLUS exp 
	arithmetic : exp . MINUS exp 
	arithmetic : exp . TIMES exp 
	arithmetic : exp . DIVIDE exp 
	boolcomp : exp . AND exp 
	boolcomp : exp . OR exp 

	PLUS	shift 45
	MINUS	shift 44
	TIMES	shift 43
	DIVIDE	shift 42
	EQ	shift 41
	NEQ	shift 40
	LT	shift 39
	LE	shift 38
	GT	shift 37
	GE	shift 36
	AND	shift 35
	OR	shift 34


	.	reduce by rule 67


state 157:

	tyfieldsP : COMMA ID COLON . ID tyfieldsP 

	ID	shift 159


	.	error


state 158:

	recP : COMMA ID EQ exp recP .  (reduce by rule 44)



	.	reduce by rule 44


state 159:

	tyfieldsP : COMMA ID COLON ID . tyfieldsP 

	COMMA	shift 150

	tyfieldsP	goto 160

	.	reduce by rule 62


state 160:

	tyfieldsP : COMMA ID COLON ID tyfieldsP .  (reduce by rule 63)



	.	reduce by rule 63


state 161:


	EOF	accept


	.	error

504 of 1044 action table entries left after compaction
735 goto table entries
